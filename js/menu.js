var mapIDs = {300:"construct",330:"isolation",350:"salvation",360:"snowbound",440:"docks",470:"sidewinder",480:"warehouse",490:"descent",500:"spacecamp",520:"lockout",580:"armory",590:"ghosttown",600:"chillout",720:"midship",730:"sandbox",740:"fortress",410:"bunkerworld",380:"chill",390:"cyberdyne",310:"deadlock",320:"guardian",340:"riverworld",400:"shrine",30:"zanzibar",3005:"005_intro",3010:"010_jungle",3020:"020_base",3030:"030_outskirts",3040:"040_voi",3050:"050_floodvoi",3070:"070_waste",3100:"100_citadel",3110:"110_hc",3120:"120_halo",3130:"130_epilogue",4100:"c100",4200:"c200",5000:"h100",5200:"l200",5300:"l300",6100:"sc100",6110:"sc110",6120:"sc120",6130:"sc130",6140:"sc140",6150:"sc150",703:"s3d_edge",705:"s3d_avalanche",700:"s3d_reactor",31:"s3d_turf"};var mapNames = {320: "Guardian" ,340: "Valhalla" ,705: "Diamondback" ,703: "Edge" ,700: "Reactor" ,31: "Icebox" ,390: "The Pit" ,380: "Narrows" ,310: "High Ground" ,410: "Standoff" ,400: "Sandtrap" ,30: "Last Resort"};
var mapDesc = {320:"Millennia of tending has produced trees as ancient as the Forerunner structures they have grown around. <br><br>2-6 players.",340:"The crew of V-398 barely survived their unplanned landing in this gorge...this curious gorge. <br><br>6-16 players.",705:"Hot winds blow over what should be a dead moon. A reminder of the power Forerunners once wielded. <br><br>6-16 players.",703:"The remote frontier world of Partition has provided this ancient databank with the safety of seclusion. <br><br>6-16 players.",700:"Being constructed just prior to the Invasion, its builders had to evacuate before it was completed. <br><br>6-16 players.",31:"Downtown Tyumen's Precinct 13 offers an ideal context for urban combat training. <br><br>4-10 players.",390:"Software simulations are held in contempt by the veteran instructors who run these training facilities. <br><br>4-10 players.",380:"Without cooling systems such as these, excess heat from the Ark's forges would render the construct uninhabitable. <br><br>2-8 players.",310:"A relic of older conflicts, this base was reactivated after the New Mombasa Slipspace Event. <br><br>4-12 players.",410:"Once, nearby telescopes listened for a message from the stars. Now, these silos contain our prepared response. <br><br>4-12 players.",400:"Although the Brute occupiers have been driven from this ancient structure, they left plenty to remember them by. <br><br>6-16 players",30:"Remote industrial sites like this one are routinely requisitioned and used as part of Spartan training exercises. <br><br>4-12 players."};var gameType = {1:"ctf",2:"slayer",3:"oddball",4:"koth",5:"forge",6:"vip",7:"juggernaut",8:"territories",9:"assault",10:"infection"};var lobbyType = { 0 : "Campaign", 1 : "Matchmaking", 2 : "Multiplayer", 3 : "Forge", 4 : "Theater"};var serverMode = {0 : "Xbox Live (Open Party)", 1 : "Xbox Live (Friends Only)", 2 : "Xbox Live (Invite Only)", 3 : "Online", 4 : "Offline"};var teamArray = [{name: 'red', color: '#620B0B'},{name: 'blue', color: '#0B2362'}];var cardOpacity = 0.9;var networkStatus = {0 : "Xbox Live (Open Party)", 1 : "Xbox Live (Friends Only)", 2 : "Xbox Live (Invite Only)", 3 : "Ready.<br>This party is open for others to join.", 4 : "Ready.<br>This party is local to your PC. To play with others, select Network and the choose Online."};var lobbyDesc = { 0 : "Campaign", 1 : "Matchmaking", 2 : "Take your party to combat and objective-based missions that you select and design. Your rules, your maps, your game.", 3 : "Take your party to collaborate in real time to edit and play variations of your favorite maps, form the subtle to the insane.", 4 : "Theater"};var networkDesc = {0 : "Xbox Live (Open Party)", 1 : "Xbox Live (Friends Only)", 2 : "Xbox Live (Invite Only)", 3 : "Play with others over your local area network, VPN or Online.", 4 : "Play only on this PC."};

var mapTable = [];$(window).load(function(){
    dew.command('Game.ListMaps', {}).then(function(response){
        var temp = response.split(",");
        for(var i=0; i < temp.length; i++){ 
            if(temp[i] != "mainmenu"){
            mapTable.push({"id":getKeyByValue(mapIDs, temp[i]),"filename":temp[i],"name":mapNames[getKeyByValue(mapIDs, temp[i])],"desc":mapDesc[getKeyByValue(mapIDs, temp[i])]});
            }
        };
        $('#mapList').empty();
        for(var i=0; i < mapTable.length; i++){
            $('#mapList').append(
                $('<li>', {
                    text: mapTable[i].name.toUpperCase(),
                    id: mapTable[i].id,
                    'data-filename': mapTable[i].filename,
                    'data-desc':mapTable[i].desc
                }).mouseover(function(){
                    $("#mapDesc").html($(this).attr('data-desc'));
                    $("#mapImage").attr("src", "images/maps/" + $(this).attr('data-filename')+ ".png");
                }).click(function(){
                    dew.command('Game.Map ' + $(this).attr('data-filename'), {}).then(function(response){
                        dew.show();  
                    }); 
                })
            )
        }
        $("#mapList li").sort(asc_sort).appendTo('#mapList');
        $('#mapDesc').html($("#mapList li:eq(0)").attr('data-desc'));
        $("#mapImage").attr("src", "images/maps/" + $("#mapList li:eq(0)").attr('data-filename') + ".png");
        //console.log(mapTable);
    });        dew.on("show", function(){        $("#blackout").hide();        $("#switchLobbyMenu").hide();            $("#switchNetworkMenu").hide(); 
        $("#switchMapMenu").hide();        dew.getSessionInfo().then(function(e){            //console.log(e);            if(e.established){                $("#mainmenu").hide();                $("#lobby").show();                //console.log('Host:' + e.isHost);                //console.log('Teams:' + e.hasTeams);                dew.getGameVariantInfo().then(function(x){                    //console.log(x);                    //console.log('Game Type Name:'+ x.name);                    if(x.name != "Forge"){                        $("#gameMode").show();                        $("#gameMode").text("GAME: "+x.name.toUpperCase());                        $("#title").text("MULTIPLAYER LOBBY");                        $("#startGame").text("START GAME");
                        $("#switchMapMenu div:not(#mapDesc)").css('top', '6.5vw');
                        $("#switchMapMenu ul").css('top', '3vw');
                        $("#mapDesc").css('top', '18vw');
                        $("#mapImage").css('top', '6.5vw');                    } else {                        $("#gameMode").hide();                        $("#title").text("FORGE LOBBY");                        $("#startGame").text("START FORGE");
                        $("#switchMapMenu div:not(#mapDesc)").css('top', '4.3vw');
                        $("#switchMapMenu ul").css('top', '0.75vw');
                        $("#mapDesc").css('top', '15.75vw');
                        $("#mapImage").css('top', '4.25vw');                    }                    //console.log('Game Type:' + gameType[x.mode]);                    $("#varPic").attr("src", "images/gametypes/" + gameType[x.mode] + ".png");                    dew.getMapVariantInfo().then(function(i){                        //console.log(i);                        //console.log('Map Name:' + i.name);                        $("#switchMap").text("MAP: "+i.name.toUpperCase());                        //console.log('Map File:' + mapIDs[i.mapId]);                        $("#mapPic").attr("src", "images/maps/" + mapIDs[i.mapId]+ ".png");                        if(x.name == "Forge"){ x.name = "Edit Objects"};                        $("#gameDesc").text(x.name + " on " + i.name);                        dew.command('Server.ListPlayersJSON', {}).then(function(l){                            var playerArray = JSON.parse(l);                            //console.log(playerArray);                            $('#playerList').empty();                            for(var i=0; i < playerArray.length; i++){                                var bgColor = playerArray[i].color;                                if(e.hasTeams){                                    bgColor = teamArray[playerArray[i].teamIndex].color;                                }                                $('#playerList').append(                                    $('<li>', {                                        text: playerArray[i].name,                                        css: {                                            backgroundColor: hexToRgb(bgColor,cardOpacity)                                        },                                        id: playerArray[i].name,                                        'data-color': bgColor,                                    }).mouseover(function(){                                        col = $(this).attr('data-color'),                                        bright = adjustColor(col, 30);                                        $(this).css("background-color", hexToRgb(bright, cardOpacity));                                    }).mouseout(function(){                                        col = $(this).attr('data-color');                                        $(this).css("background-color", hexToRgb(col, cardOpacity));                                    })                                )                            }                            //console.log('Player count:' + playerArray.length);                            dew.command('Server.Mode', {}).then(function(m){                                //console.log('Server Mode:' + serverMode[m]);                                $("#switchNetwork").text("NETWORK: "+serverMode[m].toUpperCase());                                $("#status").html(networkStatus[m]);                                if(e.isHost){                                    var maxPlayers = 2;                                    if(m = 3){                                        dew.command('Server.MaxPlayers', {}).then(function(p){                                            maxPlayers = p;                                        });                                    }                                    //console.log('Max Players:' + maxPlayers);                                    $("#playerCount").text(playerArray.length + " Player  (" + maxPlayers + " max)");                                }                                dew.command('Server.LobbyType', {}).then(function(t){                                    //console.log('Lobby Type:' + lobbyType[t]);                                });                            });                        });                    });                });            } else {                $("#lobby").hide();                $("#mainmenu").show();            }        });    });        $("#hostMultiplayer").click(function(){        dew.command('Server.LobbyType 2', {}).then(function(response){            dew.show();          });    });       $("#hostForge").click(function(){        dew.command('Server.LobbyType 3', {}).then(function(response){            dew.show();          });      });             $("#switchLobby").click(function(){        $("#blackout").show();        $("#switchLobbyMenu").show();    });    $("#switchNetwork").click(function(){        $("#blackout").show();        $("#switchNetworkMenu").show();    });
    
    $("#switchMap").click(function(){
        $("#blackout").show();
        $("#switchMapMenu").show();
    });        $("#blackout").click(function(){        $("#blackout").hide();        $("#switchLobbyMenu").hide();           $("#switchNetworkMenu").hide();
        $("#switchMapMenu").hide();    });    $("#multiLobby").mouseover(function(){        $("#lobbyDesc").text(lobbyDesc[2]);    }).click(function(){        dew.command('Server.LobbyType 2', {}).then(function(response){            dew.show();          });        });    $("#forgeLobby").mouseover(function(){        $("#lobbyDesc").text(lobbyDesc[3]);    }).click(function(){        dew.command('Server.LobbyType 3', {}).then(function(response){            dew.show();          });        });        $("#onlineNetwork").mouseover(function(){        $("#networkDesc").text(networkDesc[3]);    }).click(function(){        dew.command('Server.Mode 3', {}).then(function(response){            dew.show();          });        });    $("#offlineNetwork").mouseover(function(){        $("#networkDesc").text(networkDesc[4]);    }).click(function(){        dew.command('Server.Mode 4', {}).then(function(response){            dew.show();          });        });    $("#startGame").click(function(){        dew.command('start', {}).then(function(response){            dew.hide();        });        });        $("#switchTeams").click(function(){        dew.command('Input.UIButtonPress 4', {}).then(function(){            setTimeout(function(){                dew.show();            },1500);        });     });
    
    $("#mainmenu #exitButton").click(function(){
        dew.command('Exit', {}).then(function(){}); 
    });
    
    $("#lobby #exitButton").click(function(){
        dew.command('Exit', {}).then(function(){}); 
    });    $(document).keydown(function(e){        if(e.keyCode === 27) { //ESC            dew.command('Input.UIButtonPress 1', {}).then(function(response){                dew.show();            });          }else if (e.keyCode == 192){ //~            dew.show("console");        }    });});function hexToRgb(hex, opacity){    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);    return "rgba(" + parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16) + "," + opacity + ")";}function adjustColor(color, amount){    var colorhex = (color.split("#")[1]).match(/.{2}/g);    for (var i = 0; i < 3; i++){        var e = parseInt(colorhex[i], 16);        e += amount;        if(amount > 0){            colorhex[i] = ((e > 255) ? 255 : e).toString(16);        }else{            colorhex[i] = ((e < 0) ? 0 : e).toString(16);                   }    }    return "#" + colorhex[0] + colorhex[1] + colorhex[2];}function getKeyByValue(object, value) {  return Object.keys(object).find(key => object[key] === value);}

function asc_sort(a, b){
    return ($(b).text()) < ($(a).text()) ? 1 : -1;    
}